# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Agrodem_creating_base_grid
                                 A QGIS plugin
 TO BE ADDED
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-10-01
        git sha              : $Format:%H$
        copyright            : (C) 2019 by KTH-dESA
        email                : khavari@kth.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtWidgets import *
import os
import shutil
from qgis.utils import *
from qgis.core import *
from qgis.gui import *
from PyQt5.QtGui import *
from processing.core.Processing import Processing
Processing.initialize()
import processing
import datetime

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Agrodem_creating_base_grid_dialog import Agrodem_creating_base_gridDialog
import os.path


class Agrodem_creating_base_grid:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Agrodem_creating_base_grid_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.dlg = Agrodem_creating_base_gridDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Agrodem_creating_base_grid')

        self.toolbar = self.iface.addToolBar(u'Agrodem_creating_base_grid')
        self.toolbar.setObjectName(u'Agrodem_creating_base_grid')

        self.dlg.lineEdit.clear()
        self.dlg.toolButton.clicked.connect(self.select_workspace)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Agrodem_creating_base_grid', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Agrodem_creating_base_grid/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Agrodem - Creating Base Grid'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Agrodem_creating_base_grid'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_workspace(self):
        workspace = QFileDialog.getExistingDirectory(self.dlg, "Enter your workspace directory ")
        self.dlg.lineEdit.setText(workspace)

    def projCord_func(self):
        projCord = self.mQgsProjectionSelectionWidget(self.dlg, "Enter the CRS")
        self.dlg.mQgsProjectionSelectionWidget.crs(projCord)


    def run(self):
        """Run method that performs all the real work"""

        self.dlg.comboBox.clear()
        self.dlg.comboBox_2.clear()

        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type()== QgsMapLayer.VectorLayer and (layer.wkbType()==QgsWkbTypes.Polygon or layer.wkbType() == QgsWkbTypes.MultiPolygon):
                self.dlg.comboBox.addItem(layer.name(), layer)
                self.dlg.comboBox_2.addItem(layer.name(), layer)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            iface.actionShowPythonDialog().trigger()
            workspace = self.dlg.lineEdit.text()
            settlement = self.dlg.lineEdit_2.text()
            projCord = self.dlg.mQgsProjectionSelectionWidget.crs().authid()
            agro = self.dlg.comboBox.currentData()
            admin = self.dlg.comboBox_2.currentData()

            ext = admin.extent()

            xmin = ext.xMinimum() - 1
            xmax = ext.xMaximum() + 1
            ymin = ext.yMinimum() - 1
            ymax = ext.yMaximum() + 1

            coords = '{},{},{},{}'.format(xmin, xmax, ymin, ymax)

            #Fix geometries
            fixed = processing.run("native:fixgeometries",
                           {'INPUT': agro, 'OUTPUT': 'memory:'})

            #Clipping agro map to the area of interest
            clip1 = processing.run("native:clip", {
                'INPUT': fixed['OUTPUT'], 'OVERLAY': admin, 'OUTPUT': 'memory:'})

            #Determining yield
            yield1 = processing.run("qgis:fieldcalculator",
                           {'INPUT': clip1['OUTPUT'],
                            'FIELD_NAME': 'yield', 'FIELD_TYPE': 0, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 3,
                            'NEW_FIELD': False, 'FORMULA': ' \"product_ha\"  /  \"harv_area_\" ', 'OUTPUT': 'memory:'})

            #Reprojecting the agromap
            reproject1 = processing.run("native:reprojectlayer", {'INPUT': yield1['OUTPUT'],
                'TARGET_CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': 'memory:'})

            #Calculating the area of each unit [ha]
            area1 = processing.run("qgis:fieldcalculator", {
                'INPUT': reproject1['OUTPUT'],
                'FIELD_NAME': 'area', 'FIELD_TYPE': 0, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 3, 'NEW_FIELD': True,
                'FORMULA': '$area/10000', 'OUTPUT': 'memory:'})

            #Calculating the perimeter of each unit [km]
            perimeter=processing.run("qgis:fieldcalculator", {
                'INPUT': area1['OUTPUT'],
                'FIELD_NAME': 'perimeter', 'FIELD_TYPE': 0, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 3, 'NEW_FIELD': True,
                'FORMULA': '$perimeter/1000', 'OUTPUT': 'memory:'})

            #Creating base point layer
            if self.dlg.radioButton.isChecked():
                basepoint = processing.run("qgis:regularpoints", {
                    'EXTENT': coords + '[EPSG:4326]',
                    'SPACING': 250, 'INSET': 0, 'RANDOMIZE': False, 'IS_SPACING': True,
                    'CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': 'memory:'})
            elif self.dlg.radioButton_2.isChecked():
                basepoint =processing.run("qgis:regularpoints", {
                    'EXTENT': coords + '[EPSG:4326]',
                    'SPACING': 500, 'INSET': 0, 'RANDOMIZE': False, 'IS_SPACING': True,
                    'CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': 'memory:'})
            elif self.dlg.radioButton_3.isChecked():
                basepoint =processing.run("qgis:regularpoints", {
                    'EXTENT': coords + '[EPSG:4326]',
                    'SPACING': 1000, 'INSET': 0, 'RANDOMIZE': False, 'IS_SPACING': True,
                    'CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': 'memory:'})
            elif self.dlg.radioButton_4.isChecked():
                basepoint =processing.run("qgis:regularpoints", {
                    'EXTENT': coords + '[EPSG:4326]',
                    'SPACING': 5000, 'INSET': 0, 'RANDOMIZE': False, 'IS_SPACING': True,
                    'CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': 'memory:'})
            else:
                basepoint =processing.run("qgis:regularpoints", {
                    'EXTENT': coords + '[EPSG:4326]',
                    'SPACING': 10000, 'INSET': 0, 'RANDOMIZE': False, 'IS_SPACING': True,
                    'CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': 'memory:'})

            #Clipping point layer
            clip2 = processing.run("native:clip", {
                'INPUT': basepoint['OUTPUT'], 'OVERLAY': perimeter['OUTPUT'], 'OUTPUT': 'memory:'})

            #Join attributes based on location
            joined1 = processing.run("qgis:joinattributesbylocation", {
                'INPUT': clip2['OUTPUT'],
                'JOIN': perimeter['OUTPUT'], 'PREDICATE': [0], 'JOIN_FIELDS': [], 'METHOD': 0,
                'DISCARD_NONMATCHING': False, 'PREFIX': '', 'OUTPUT': 'memory:'})

            # Reprojecting back to WGS84
            reproject2=processing.run("native:reprojectlayer", {'INPUT': joined1['OUTPUT'],
                                                     'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
                                                     'OUTPUT':  'memory:'})

            #Adding coordiantes to settlementfile
            coords = processing.run("native:meancoordinates",
                           {'INPUT': reproject2['OUTPUT'], 'WEIGHT': None, 'UID': 'id', 'OUTPUT': 'memory:'})

            joined2 = processing.run("native:joinattributestable", {'INPUT': reproject2['OUTPUT'], 'FIELD': 'id',
                                                          'INPUT_2': coords['OUTPUT'],
                                                          'FIELD_2': 'id', 'FIELDS_TO_COPY': ['MEAN_X', 'MEAN_Y'],
                                                          'METHOD': 1, 'DISCARD_NONMATCHING': False, 'PREFIX': '',
                                                          'OUTPUT': 'memory:'})

            #Writing the final excel file
            processing.run("qgis:refactorfields",
                           {'INPUT': joined2['OUTPUT'],
                            'FIELDS_MAPPING': [
                                {'expression': '"id"', 'length': 16, 'name': 'id', 'precision': 0, 'type': 4},
                                {'expression': '"admin2"', 'length': 3, 'name': 'state', 'precision': 0,
                                 'type': 10},
                                {'expression': '"country_co"', 'length': 10, 'name': 'c_code', 'precision': 0,
                                 'type': 10},
                                {'expression': '"country"', 'length': 9, 'name': 'country', 'precision': 0,
                                 'type': 10},
                                {'expression': '"crop"', 'length': 16, 'name': 'crop', 'precision': 0,
                                 'type': 10},
                                {'expression': '"year"', 'length': 5, 'name': 'year', 'precision': 0,
                                 'type': 6},
                                {'expression': '"harv_area_"', 'length': 5, 'name': 'harv_area_ha', 'precision': 15,
                                 'type': 6},
                                {'expression': '"yield"', 'length': 5, 'name': 'yield', 'precision': 15,
                                 'type': 6},
                                {'expression': '"product_ha"', 'length': 5, 'name': 'production_ha', 'precision': 15,
                                 'type': 6},
                                {'expression': '"area"', 'length': 18, 'name': 'statearea_ha', 'precision': 10, 'type': 6},
                                {'expression': '"perimeter"', 'length': 18, 'name': 'perimeter_km', 'precision': 10,
                                 'type': 6},
                                {'expression': '"MEAN_X"', 'length': 18, 'name': 'lon', 'precision': 10, 'type': 6},
                                {'expression': '"MEAN_Y"', 'length': 18, 'name': 'lat', 'precision': 10, 'type': 6}],
                            'OUTPUT': workspace + r'/' + settlement + '.csv'})